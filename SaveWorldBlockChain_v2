// SaveWorldP2PBlockchain.cpp
// Author: Rana Ammar Yasir
// Description: P2P Blockchain with Proof of Work, Proof of Action, Synchronization, and Transactions

#include <iostream>
#include <vector>
#include <ctime>
#include <sstream>
#include <iomanip>
#include <thread>
#include <mutex>
#include <map>
#include <set>
#include <openssl/sha.h>
#include <boost/asio.hpp>

using namespace std;
using boost::asio::ip::tcp;

mutex chainMutex;

// SHA256 hashing function
string sha256(const string &input) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256((unsigned char*)input.c_str(), input.size(), hash);
    stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; ++i)
        ss << hex << setw(2) << setfill('0') << (int)hash[i];
    return ss.str();
}

// Transaction structure
struct Transaction {
    string from;
    string to;
    int amount;

    string toString() const {
        return from + to + to_string(amount);
    }
};

// Block structure
struct Block {
    int index;
    time_t timestamp;
    vector<Transaction> transactions;
    string prevHash;
    string hash;
    int nonce;

    Block(int idx, const vector<Transaction> &txs, const string &prevHash)
        : index(idx), transactions(txs), prevHash(prevHash), nonce(0) {
        timestamp = time(nullptr);
        hash = calculateHash();
    }

    string calculateHash() const {
        stringstream ss;
        ss << index << timestamp << prevHash << nonce;
        for (const auto &tx : transactions) ss << tx.toString();
        return sha256(ss.str());
    }

    void mineBlock(int difficulty) {
        string target(difficulty, '0');
        do {
            nonce++;
            hash = calculateHash();
        } while (hash.substr(0, difficulty) != target);

        cout << "Block mined: " << hash << endl;
    }
};

// Blockchain class
class Blockchain {
public:
    Blockchain(int diff = 4) : difficulty(diff) {
        chain.push_back(createGenesisBlock());
    }

    Block createGenesisBlock() {
        return Block(0, {}, "0");
    }

    void addBlock(const vector<Transaction> &transactions) {
        lock_guard<mutex> lock(chainMutex);
        Block newBlock(chain.size(), transactions, getLatestBlock().hash);
        cout << "Mining block " << newBlock.index << " with " << transactions.size() << " txs...\n";
        newBlock.mineBlock(difficulty);

        if (proofOfAction(transactions)) {
            chain.push_back(newBlock);
            cout << "Block added to chain.\n";
        } else {
            cout << "Proof of Action failed. Block rejected.\n";
        }
    }

    bool proofOfAction(const vector<Transaction> &transactions) {
        return transactions.size() % 2 == 0;
    }

    Block getLatestBlock() const {
        return chain.back();
    }

    void printChain() const {
        cout << "\n======= SaveWorld Chain =======\n";
        for (const auto &block : chain) {
            cout << "Block #" << block.index << "\n";
            cout << "Timestamp: " << ctime(&block.timestamp);
            cout << "Hash: " << block.hash << "\n";
            cout << "Previous: " << block.prevHash << "\n";
            cout << "Transactions:\n";
            for (auto &tx : block.transactions) {
                cout << "  From: " << tx.from << " To: " << tx.to << " Amount: " << tx.amount << "\n";
            }
            cout << "-------------------------------\n";
        }
    }

    const vector<Block>& getChain() const { return chain; }

private:
    vector<Block> chain;
    int difficulty;
};

// P2P Node class
class Node {
public:
    Node(short port, Blockchain &blockchain) : acceptor(io_context, tcp::endpoint(tcp::v4(), port)), blockchain(blockchain) {
        startAccept();
    }

    void run() {
        io_context.run();
    }

    void connectToPeer(const string &host, short port) {
        try {
            tcp::resolver resolver(io_context);
            auto endpoints = resolver.resolve(host, to_string(port));
            auto socket = make_shared<tcp::socket>(io_context);
            boost::asio::connect(*socket, endpoints);
            cout << "Connected to peer: " << host << ":" << port << endl;
            // In a real network, we would send/receive blockchain data here
        } catch (exception &e) {
            cerr << "Connection failed: " << e.what() << endl;
        }
    }

private:
    void startAccept() {
        auto socket = make_shared<tcp::socket>(io_context);
        acceptor.async_accept(*socket, [this, socket](boost::system::error_code ec) {
            if (!ec) {
                cout << "New peer connected.\n";
                // In a real app, read data here
            }
            startAccept();
        });
    }

    boost::asio::io_context io_context;
    tcp::acceptor acceptor;
    Blockchain &blockchain;
};

// Main function
int main() {
    Blockchain saveWorldChain(4);

    // Start a P2P node
    short port = 8080; // or any available port
    Node node(port, saveWorldChain);

    thread nodeThread([&]() { node.run(); });

    // Example: Add sample transactions
    vector<Transaction> txs1 = { {"Alice", "Bob", 10}, {"Charlie", "Dave", 20} };
    saveWorldChain.addBlock(txs1);

    vector<Transaction> txs2 = { {"Eve", "Frank", 30} }; // Will fail PoA
    saveWorldChain.addBlock(txs2);

    saveWorldChain.printChain();

    nodeThread.join();
    return 0;
}
